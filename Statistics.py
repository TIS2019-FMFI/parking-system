from Record import Recordfrom BOX import Boximport csvimport datetimefrom Finder import Finderclass Statistics:    #treba vymyslieť daycount    def __init__(self, ecvTime, ecvNum, firmTime, firmNum, box, boxTime, ztp, ztpFirm, fromDate= None, toDate= None):        self.ecvTime = ecvTime        self.ecvNum = ecvNum        self.firmTime = firmTime        self.firmNum = firmNum        self.box = box        self.boxTime = boxTime        self.ztp = ztp        self.ztpFirm = ztpFirm        self.fromDate = fromDate        self.toDate = toDate        self.f = Finder()        print(fromDate)        self.generate()            def generate(self):                if self.ecvTime:            self.exportFile('ecvByTime.csv', ['ecv','time'], self.ecvByTime())        if self.ecvNum:            self.exportFile('ecvByNum.csv', ['ecv','num'], self.ecvByNum())        if self.firmTime:            self.exportFile('firmByTime.csv', ['firm','time'], self.firmByTime())        if self.firmNum:            self.exportFile('firmByNum.csv', ['firm','num'], self.firmByNum())        if self.box:            self.exportFile('everyBox.csv', ['box','%'], self.everyBox())        if self.boxTime:            self.exportFile('boxInTime.csv', ['box','%'], self.boxInTime(self.fromDate,self.toDate))        if self.ztp:            self.exportFile('ztp.csv', ['box','%'], self.ztp())        if self.ztpFirm:            self.exportFile('zptByFirm.csv', ['firm','%'], self.ztpByFirm())    def exportFile(self, name, names, data):        with open(name, mode = 'w') as file:            writer = csv.writer(file, delimiter = ',', quotechar = '"', quoting = csv.QUOTE_MINIMAL)            writer.writerow(names)            if len(data) > 0:                for key,value in data.items:                    writer.writerow([key, value])    def ecvByTime(self):                records = self.f.findAll(self.fromDate, self.toDate)        stats = dict()        for rec in records:            if rec.ECV in stats:                stats[rec.ECV] = stats[rec.ECV] + (rec.departureTime - rec.arrivalTime)            else:                stats[rec.ECV] = (rec.departureTime - rec.arrivalTime)        sortedStats = sorted(stats.items(), key = lambda kv: kv[1], reverse = True)        return sortedStats    def ecvByNum(self):        records = self.f.findAll()        stats = dict()        for rec in records:            if rec.ECV in stats:                stats[rec.ECV] = stats[rec.ECV] + 1            else:                stats[rec.ECV] = 1        sortedStats = sorted(stats.items(), key = lambda kv: kv[1], reverse = True)        return sortedStats    def firmByTime(self):        records = self.f.findAll()        stats = dict()        for rec in records:            if rec.companyId in stats:                stats[rec.companyId] = stats[rec.companyId] + (rec.departureTime - rec.arrivalTime)            else:                stats[rec.companyId] = (rec.departureTime - rec.arrivalTime)        sortedStats = sorted(stats.items(), key = lambda kv: kv[1], reverse = True)        return sortedStats    def firmByNum(self):        records = self.f.findAll()        stats = dict()        for rec in records:            if rec.id_company in stats:                stats[rec.companyId] = stats[rec.companyId] + 1            else:                stats[rec.companyId] = 1        sortedStats = sorted(stats.items(), key = lambda kv: kv[1], reverse = True)        return sortedStats    def everyBox(self, dayCount):        records = self.f.findAll()        stats = dict()        for rec in records:            if rec.boxId in stats:                stats[rec.boxId] = stats[rec.boxId] + (((rec.departureTime - rec.arrivalTime)/24)/dayCount)            else:                stats[rec.boxId] + (((rec.departureTime - rec.arrivalTime)/24)/dayCount)                #ked to bude zle tak sorry        sortedStats = sorted(stats.items(), key = lambda kv: kv[1], reverse = True)        return sortedStats                                                    def boxInTime(self, dayCount, startRegion, endRegion):        records = self.f.findAll()        stats = dict()        startParking = None        endParking = None        for rec in records:            if rec.arrivalTime < endRegion:                if rec.departureTime > startRegion:                    if rec.departureTime > endRegion:                        endParking = endRegion                    else:                        endParking = rec.departureTime                    if rec.arrivalTime > startRegion:                        startParking = startRegion                    else:                        startParking = rec.arrivalTime                                            if rec.boxId in stats:                        stats[rec.boxId] = stats[rec.boxId] + (((endParking - startParking)/(endRegion - startRegion))/dayCount)                    else:                        stats[rec.boxId] = (((endParking - startParking)/(endRegion - startRegion))/dayCount)        sortedStats = sorted(stats.items(), key = lambda kv: kv[1], reverse = True)        return sortedStats            def ztp(self, dayCount):        records = self.f.findAll()        stats = dict()        ztpBoxes = set()        for box in FrameCarPark.boxes:            if box.ztp:                ztpBoxes.add(box.number)        for rec in records:            if rec.boxID in ztpBoxes:                if rec.boxID in stats:                    stats[rec.boxId] = stats[rec.boxId] + (((rec.departureTime - rec.arrivalTime)/24)/dayCount)                else:                    stats[rec.boxId] + (((rec.departureTime - rec.arrivalTime)/24)/dayCount)        sortedStats = sorted(stats.items(), key = lambda kv: kv[1], reverse = True)        return sortedStats                    def ztpByFirm(self):        records = self.f.findAll()        stats = dict()        ztpBoxes = set()        #treba vymyslieť ako určiť ktoré boxy sú zťp        ztpBoxes.add(box.number)        for rec in records:            if rec.boxId in ztpBoxes:                if rec.companyId in stats:                    stats[rec.companyId] = stats[rec.companyID] + (((rec.departureTime - rec.arrivalTime)/24)/dayCount)                else:                    stats[rec.companyId] + (((rec.departureTime - rec.arrivalTime)/24)/dayCount)        sortedStats = sorted(stats.items(), key = lambda kv: kv[1], reverse = True)        return sortedStats                